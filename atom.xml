<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The World</title>
  
  <subtitle>顺其自然，无为而治</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangbbsday.github.io/"/>
  <updated>2019-11-20T00:52:11.570Z</updated>
  <id>http://zhangbbsday.github.io/</id>
  
  <author>
    <name>火提昂</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity按钮动画问题</title>
    <link href="http://zhangbbsday.github.io/2019/11/20/unity-button-animation/"/>
    <id>http://zhangbbsday.github.io/2019/11/20/unity-button-animation/</id>
    <published>2019-11-20T00:04:19.000Z</published>
    <updated>2019-11-20T00:52:11.570Z</updated>
    
    <content type="html"><![CDATA[<hr><p>在制作新游戏愤怒的小鸟时，我遇见了按钮被选中后，动画无法正常播放的问题。<br>后来得到解决，特在此记录，以作备忘。</p><hr><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Unity 中使用 GUI 作为其 UI 界面，其中包括了很多有用的预制物体。按钮（Button）便是其中之一。<br>原版游戏中，每当玩家鼠标进入按钮时，按钮便会放大，已表明其被选中。当按下后，该按钮仍然可以触发上述效果。<br>为了实现这种功能，我尝试使用 Button 中的 Animation ，试图通过动画来控制其缩放。<br>然而这样就遇到了问题。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Unity 中的 UI 物体，继承于<code>Selectable</code>类。顾名思义，该类说明该物体可以被选中。<br>当按钮被选中后，动画机会自动切换到 Select 。这时若是想再次使其放大，必须先取消对该按钮的选择（通过点击空白区域或是其他可被选中的 UI 物体）。<br>这就使得我无法做出和原版按钮一样的效果。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><blockquote><p>但万事皆有解决之法。</p></blockquote><p>我一开始试图用取消选择的方式解决问题，但很可惜的是，我并没有找到取消选择的有效方法。<br>后来，我猜测是由于导航（Navigation）的缘故。这个导航，可以自动生成 UI 之间的切换路径，当用键盘操作时，可以顺着预设路径选择不同 UI 。<br>事实证明，这的确是导航的问题。通过把导航关闭，问题得到解决。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;在制作新游戏愤怒的小鸟时，我遇见了按钮被选中后，动画无法正常播放的问题。&lt;br&gt;后来得到解决，特在此记录，以作备忘。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Unity" scheme="http://zhangbbsday.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://zhangbbsday.github.io/tags/Unity/"/>
    
      <category term="UI" scheme="http://zhangbbsday.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>Boyer-Moore字符串查找</title>
    <link href="http://zhangbbsday.github.io/2019/11/13/boyer-moore/"/>
    <id>http://zhangbbsday.github.io/2019/11/13/boyer-moore/</id>
    <published>2019-11-13T04:08:57.000Z</published>
    <updated>2019-11-13T08:12:56.336Z</updated>
    
    <content type="html"><![CDATA[<hr><p>字符串查找一直是编程的重点内容。前文我介绍了正则表达式的应用，然而在实际中，最为广泛应用的是一个叫做 Boyer-Moore 的字符串查找算法。</p><hr><a id="more"></a><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>这算法的来历我就不讲了，有兴趣的自己百度。<br>其被广泛应用于各大文本编辑器内，如：</p><p><img src="https://i.loli.net/2019/11/13/yknIHasTeK8XOUc.png" alt="image.png"></p><p>由此可见该种算法的普适和高效。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>Boyer-Moore 算法和普通匹配字符串的方式不同，它用了更为巧妙的变化，使得匹配次数大大缩减。</p><h2 id="匹配方向"><a href="#匹配方向" class="headerlink" title="匹配方向"></a>匹配方向</h2><p>Boyer-Moore算法 采取从后往前匹配的规则。<br>如下图所示，从匹配字符串的最后一个字符开始向前匹配。</p><p><img src="https://i.loli.net/2019/11/13/DtOlcmzkrWMPI6E.png" alt="1.png"></p><h2 id="坏字符规则"><a href="#坏字符规则" class="headerlink" title="坏字符规则"></a>坏字符规则</h2><p>我们发现 <strong>S</strong> 和 <strong>E</strong> 无法匹配，且 <strong>S</strong> 并不存在于 <strong>EXAMPLE</strong> 内。所以将整个匹配字符串向前移动 <strong>7</strong> 个单位。<br>可以称 <strong>S</strong> 为所谓<strong>坏字符</strong>。</p><p><img src="https://i.loli.net/2019/11/13/hWpySO9zMKibUeE.png" alt="2.png"></p><p>随后继续上述过程，发现 <strong>P</strong> 和 <strong>E</strong> 无法匹配。但此时 <strong>P</strong> 存在于 <strong>EXAMPLE</strong> 内，所以将两个 <strong>P</strong> 对齐。</p><p><img src="https://i.loli.net/2019/11/13/AeZQvoCiRuPL528.png" alt="3.png"></p><p>通过上边两次移动，我们可以发现一个事实：<br><strong>匹配字符串移动距离 = 坏字符匹配位置 - 第一次坏字符出现位置。</strong></p><blockquote><p>当匹配字符串内不存在坏字符，令值为 <strong>-1</strong> 。</p></blockquote><p>利用上述公式，可以计算出移动的位置：</p><p>第一次移动距离为：$Length1 = 6 - (-1) = 7$<br>第二次移动距离为：$Length2 = 6 - 4 = 2$<br>上述公式就是所谓坏字符规则。</p><h2 id="好后缀规则"><a href="#好后缀规则" class="headerlink" title="好后缀规则"></a>好后缀规则</h2><p>继续匹配，此时可以发现 <strong>MPLE</strong> 均已经匹配。若是用坏字符规则，会移动 <strong>3</strong> 个单位。<br>其中 <strong>MPLE</strong> 被称作<strong>好后缀</strong>。</p><p><img src="https://i.loli.net/2019/11/13/klf2ceBumLv9Yqn.png" alt="4.png"></p><p>但此时还有更好的移动方式，可以直接移动 <strong>6</strong> 个单位。<br>这里用到了好后缀规则。类似于坏字符规则，其公式为:<br><strong>匹配字符串移动距离 = 好后缀匹配位置 - 匹配字符串头部好后缀出现的位置。</strong></p><blockquote><p>当匹配字符串头部不存在好后缀时，令其值为 <strong>-1</strong> 。</p></blockquote><p>如下图，<strong>E</strong> 就是计算用的好后缀。</p><p><img src="https://i.loli.net/2019/11/13/j9KathuUsDgOFiy.png" alt="5.png"></p><p>利用上述公式，可以计算出移动的位置：$Length = 6 - 0 = 6$</p><p><img src="https://i.loli.net/2019/11/13/I34fX1WxMtuVk7O.png" alt="8.png"></p><p>然后用坏字符规则，便可匹配字符串。</p><p><img src="https://i.loli.net/2019/11/13/oBlULQSMct1D7fF.png" alt="7.png"></p><h2 id="综合规则"><a href="#综合规则" class="headerlink" title="综合规则"></a>综合规则</h2><p>两大规则为 Boyer-Moore 算法提供了匹配的依据。为了达成最高效的匹配，必须尽可能的减少匹配次数。<br>故匹配字符串每次实际移动距离为:<br>$Length = Max\{\ BadChar(\ ),\ GoodSuffix(\ )\ \} $。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>具体实现代码如下</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">BoyerMooreMatch</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">static</span> (<span class="params"><span class="keyword">int</span> Start, <span class="keyword">int</span> End</span>) <span class="title">Match</span>(<span class="params"><span class="keyword">string</span> str, <span class="keyword">string</span> pattern</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> index = pattern.Length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> indexReturn = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">string</span> suffix;</span><br><span class="line">        <span class="keyword">char</span> badChar = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="keyword">int</span> badCharIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; str.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            suffix = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = pattern.Length - <span class="number">1</span>, j = index; i &gt;= <span class="number">0</span>; i--, j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[j] == pattern[i])</span><br><span class="line">                    suffix += pattern[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    badChar = str[j];</span><br><span class="line">                    badCharIndex = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            suffix = FlipString(suffix);</span><br><span class="line">            <span class="keyword">if</span> (suffix == pattern)</span><br><span class="line">            &#123;</span><br><span class="line">                indexReturn = index;</span><br><span class="line">                <span class="keyword">if</span> (suffix.Length &gt; <span class="number">1</span>)</span><br><span class="line">                    indexReturn -= suffix.Length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (suffix.Length != <span class="number">0</span>)</span><br><span class="line">                index += Math.Max(GetBadCharNumber(pattern, badCharIndex, badChar), GetGoodSuffixNum(pattern, suffix));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                index += GetBadCharNumber(pattern, badCharIndex, badChar);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (indexReturn, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetBadCharNumber</span>(<span class="params"><span class="keyword">string</span> pattern, <span class="keyword">int</span> index, <span class="keyword">char</span> c</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> end = index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = end - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pattern[i] == c)</span><br><span class="line">            &#123;</span><br><span class="line">                start = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> end - start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetGoodSuffixNum</span>(<span class="params"><span class="keyword">string</span> pattern, <span class="keyword">string</span> suffix</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> end = pattern.Length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = suffix.Length - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pattern[j] != suffix[i])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> end - start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">FlipString</span>(<span class="params"><span class="keyword">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.ToCharArray();</span><br><span class="line">        Array.Reverse(chars);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">string</span>(chars);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用元组，可以返回匹配区间。</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;字符串查找一直是编程的重点内容。前文我介绍了正则表达式的应用，然而在实际中，最为广泛应用的是一个叫做 Boyer-Moore 的字符串查找算法。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://zhangbbsday.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C#" scheme="http://zhangbbsday.github.io/tags/C/"/>
    
      <category term="算法" scheme="http://zhangbbsday.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="http://zhangbbsday.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>整体修改UI物体透明度</title>
    <link href="http://zhangbbsday.github.io/2019/11/07/canvas-group/"/>
    <id>http://zhangbbsday.github.io/2019/11/07/canvas-group/</id>
    <published>2019-11-07T11:28:10.000Z</published>
    <updated>2019-11-07T11:41:16.265Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Unity 内置有 UI 物体，可以很方便的构建游戏交互界面。有时候，为了做出某些效果，需要整体调整 UI 物体的透明度。<br>Unity 提供了一个组件，可以整体调整 UI 透明度。</p><hr><a id="more"></a><h1 id="CanvasGroup"><a href="#CanvasGroup" class="headerlink" title="CanvasGroup"></a>CanvasGroup</h1><p>Unity 内置了一个<code>CanvasGroup</code>组件，用于调整<code>Canvas</code>下一个物体和其所有子物体的透明度、射线遮挡等功能。<br>因为其提供了<code>alpha</code>属性，所以可以用来整体调整 UI 物体的透明度。<br>具体使用方法略过。</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>在我自制游戏<code>FlappyBird</code>中，为了实现标题的淡入淡出、死亡闪屏及转场黑幕，必须同时对多个物体透明度进行修改。<br>在原来的方式中，需要用一个列表存储所有需要修改的对象，然后一个个进行修改。<br>但在使用了<code>CanvasGroup</code>后，事情变得十分简单了。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Unity 内置有 UI 物体，可以很方便的构建游戏交互界面。有时候，为了做出某些效果，需要整体调整 UI 物体的透明度。&lt;br&gt;Unity 提供了一个组件，可以整体调整 UI 透明度。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Unity" scheme="http://zhangbbsday.github.io/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://zhangbbsday.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity读取和写入CSV文件</title>
    <link href="http://zhangbbsday.github.io/2019/11/03/csv-read-and-write/"/>
    <id>http://zhangbbsday.github.io/2019/11/03/csv-read-and-write/</id>
    <published>2019-11-03T13:34:21.000Z</published>
    <updated>2019-11-13T08:16:45.420Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Unity 中经常需要存储数据，比如实现存档功能。这时候便需要把数据保存在文件中，以便数据持久化。<br>保存数据的文件类型有很多种，其中便包含 CSV 文件类型。</p><hr><a id="more"></a><h1 id="CSV文件类型"><a href="#CSV文件类型" class="headerlink" title="CSV文件类型"></a>CSV文件类型</h1><p>CSV，全称为 Comma-Separated Values，中文译名为逗号分隔值。顾名思义，该类文件保存数据的方式便是以逗号分隔。<br>CSV 文件可以使用 Excel 编辑，但其本质仍是文本文档。<br>一个常见的 CSV 文件如下图所示：</p><p><img src="https://i.loli.net/2019/11/03/qJDVUni32fGW6BQ.png" alt="image.png"></p><p>其在文本中为：</p><p><img src="https://i.loli.net/2019/11/03/84bLXFfwoxkGtJl.png" alt="image.png"></p><blockquote><p>CSV 中分隔符类型可以自义定。</p></blockquote><p>因为其有分隔符的特性，可以很方便的处理简单数据。</p><h1 id="读取和写入"><a href="#读取和写入" class="headerlink" title="读取和写入"></a>读取和写入</h1><p>Unity 使用 C# 作为脚本语言。而 C# 提供了很多操作文件的类和方法，极大的简化了编写流程。<br>所用操作文件的方法，都在<code>System.IO</code>命名空间内。<br>下面的代码，是我自制游戏 FlappyBird 内所用的。</p><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p>C# 中有专门读取文件的类<code>StreamReader</code>。<br>这里要读取文件内的分数，可以写出如下代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> StreamReader <span class="title">Read</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (path == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    path += fileName;</span><br><span class="line">    <span class="keyword">if</span> (!File.Exists(path))</span><br><span class="line">        File.CreateText(path);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StreamReader(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用一个<code>public</code>方法调用之。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">string</span>[]&gt; ReadCsv(<span class="keyword">string</span> path)</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="keyword">string</span>[]&gt; list = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>[]&gt;();</span><br><span class="line">    <span class="keyword">string</span> line;</span><br><span class="line">    StreamReader stream = Read(path);</span><br><span class="line">    <span class="keyword">while</span> ((line = stream.ReadLine()) != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        list.Add(line.Split(<span class="string">','</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    stream.Close();</span><br><span class="line">    stream.Dispose();</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分隔的字符串，每一行都是一个<code>string[]</code>，用一个<code>List&lt;string[]&gt;</code>保存所有内容。</p><blockquote><p>这里的<code>fileName</code>是指 CSV 文件的地址，如<code>\save.csv</code>。</p></blockquote><p>随后便可以根据具体需求，对数据进行处理。</p><h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><p>与上文的<code>StreamReader</code>对应，读取文件用的是<code>StreamWriter</code>。<br>其打开文件的方法和上文读取文件的方法类似，故略去。<br>在我的项目内，我需要对游戏内实时产生的分数写入文件，以形成一个所谓分数排行榜。<br>所以代码如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteCsv</span>(<span class="params"><span class="keyword">string</span>[] strs, <span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StreamWriter stream = Write(path);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs[i] != <span class="literal">null</span>)</span><br><span class="line">            stream.WriteLine(<span class="string">$"<span class="subst">&#123;(i + <span class="number">1</span>).ToString()&#125;</span>,<span class="subst">&#123;strs[i]&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    stream.Close();</span><br><span class="line">    stream.Dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>对文件的操作有一些注意事项，下面都是我血和泪的教训。</p><ol><li>不能写入已经打开的文件。</li><li>在操作文件之前，要检查文件是否存在。</li><li>操作文件有一定性能问题，注意不要放在<code>Update</code>内。</li><li>对于 Unity 来讲，文件所在文件夹内必须已经有文件，否则 Unity 打包时不会生成该文件夹。</li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Unity 中经常需要存储数据，比如实现存档功能。这时候便需要把数据保存在文件中，以便数据持久化。&lt;br&gt;保存数据的文件类型有很多种，其中便包含 CSV 文件类型。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Unity" scheme="http://zhangbbsday.github.io/categories/Unity/"/>
    
    
      <category term="C#" scheme="http://zhangbbsday.github.io/tags/C/"/>
    
      <category term="Unity" scheme="http://zhangbbsday.github.io/tags/Unity/"/>
    
      <category term="IO" scheme="http://zhangbbsday.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>FlappyBird</title>
    <link href="http://zhangbbsday.github.io/2019/10/31/flappy-bird/"/>
    <id>http://zhangbbsday.github.io/2019/10/31/flappy-bird/</id>
    <published>2019-10-31T13:39:05.000Z</published>
    <updated>2019-11-03T13:36:08.020Z</updated>
    
    <content type="html"><![CDATA[<hr><p>FlappyBird，中文译名飞扬的小鸟，是曾经风靡一时的独立小游戏。<br>应游戏开发需要，我从零开始制作了这款游戏。</p><hr><a id="more"></a><h1 id="游戏简介"><a href="#游戏简介" class="headerlink" title="游戏简介"></a>游戏简介</h1><p>这是我第二款完成制作的游戏，也是第一款Unity游戏。<br>本游戏为开源项目。<br>具体内容如下表：</p><div class="table-container"><table><thead><tr><th style="text-align:center">键</th><th style="text-align:center">值</th></tr></thead><tbody><tr><td style="text-align:center">名字</td><td style="text-align:center">FlappyBird</td></tr><tr><td style="text-align:center">平台</td><td style="text-align:center">PC</td></tr><tr><td style="text-align:center">引擎</td><td style="text-align:center">Unity</td></tr><tr><td style="text-align:center">类型</td><td style="text-align:center">益智类</td></tr><tr><td style="text-align:center">年龄限制</td><td style="text-align:center">全年龄</td></tr></tbody></table></div><h1 id="游戏操作"><a href="#游戏操作" class="headerlink" title="游戏操作"></a>游戏操作</h1><p>鼠标操作。</p><h1 id="游戏截图"><a href="#游戏截图" class="headerlink" title="游戏截图"></a>游戏截图</h1><p><img src="https://i.loli.net/2019/10/31/Gur8pLhgwAcKqIQ.png" alt="USVD0FA__`H@LQ_0GEJVB7S.png"><br><img src="https://i.loli.net/2019/10/31/mStlCKjnBNVEi4Q.png" alt="ABFZ__KG__BTO5JE__EJ9PN.png"><br><img src="https://i.loli.net/2019/10/31/9pVkWxn6rU5L1lI.png" alt="W_KX_UR1N_2EA`2`UENMOCU.png"></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>可以通过我的<a href="https://github.com/zhangbbsday/FlappyBird/releases/tag/V1.0" target="_blank" rel="noopener">GitHub仓库</a>下载。</p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p><strong>本游戏为开源项目。仅用于个人娱乐和学习，严禁商用！</strong><br>如有侵权，请及时联系我。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;FlappyBird，中文译名飞扬的小鸟，是曾经风靡一时的独立小游戏。&lt;br&gt;应游戏开发需要，我从零开始制作了这款游戏。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="http://zhangbbsday.github.io/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="Unity" scheme="http://zhangbbsday.github.io/tags/Unity/"/>
    
      <category term="游戏" scheme="http://zhangbbsday.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>C#中的正则表达式</title>
    <link href="http://zhangbbsday.github.io/2019/10/27/regex/"/>
    <id>http://zhangbbsday.github.io/2019/10/27/regex/</id>
    <published>2019-10-27T05:33:00.000Z</published>
    <updated>2019-10-28T12:19:40.308Z</updated>
    
    <content type="html"><![CDATA[<hr><p>编程中经常要处理字符串。其中，在提取子字符串方面，可以由正则表达式来完成。</p><hr><a id="more"></a><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>所谓正则表达式，便是一串以字符串形式表现的匹配规则。通过该规则，可以从目标字符串中提取出所需的子字符串。<br>在C#中，正则表达式的写法大致如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> pattern = <span class="string">@"\w+"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>因为表达式内有多种转义字符，所以必须加上<code>@</code>前缀。</p></blockquote><h1 id="调用正则"><a href="#调用正则" class="headerlink" title="调用正则"></a>调用正则</h1><p>想要使用正则表达式，就必须要调用对应的方法。在C#中，正则表达式相关的方法，都被放在<code>System.Text.RegularExpressions</code>命名空间内。</p><h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><p>C#提供了用于储存匹配对象的类<code>Match</code>和<code>MatchCollection</code>，后者为前者的集合。<br>这里的匹配对象不是字符串类型，但可以用<code>Match.Value</code>获取其字符串。<br>两者使用方法如下表所示:</p><div class="table-container"><table><thead><tr><th style="text-align:center">比较</th><th style="text-align:center"><code>Match</code></th><th style="text-align:center"><code>MatchCollection</code></th></tr></thead><tbody><tr><td style="text-align:center">内容</td><td style="text-align:center">第一个匹配对象</td><td style="text-align:center">多个匹配对象</td></tr><tr><td style="text-align:center">方法</td><td style="text-align:center"><code>Regex.Match()</code></td><td style="text-align:center"><code>Regex.Matches()</code></td></tr></tbody></table></div><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>正则表达式有一套统一的匹配规则，不受语言类型的限制。</p><h3 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h3><p>可以直接用普通字符串来做匹配规则。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> pattern = <span class="string">@"王一凡"</span>;</span><br></pre></td></tr></table></figure><p>上述规则，可以从目标字符串中提出<code>&quot;王一凡&quot;</code>子字符串。</p><h3 id="匹配字符"><a href="#匹配字符" class="headerlink" title="匹配字符"></a>匹配字符</h3><p>可以用对应的匹配字符来匹配字符串。<br>常用的匹配字符如下表：</p><div class="table-container"><table><thead><tr><th>匹配字符</th><th>描述</th><th>规则</th><th>匹配</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>a.e</td><td><code>&quot;have ate&quot;</code>中的<code>&quot;ave&quot;</code>和<code>&quot;ate&quot;</code></td></tr><tr><td>\t</td><td>匹配制表符</td><td>\w+\t</td><td><code>&quot;Hello\t&quot;</code>中的<code>&quot;Hello\t&quot;</code></td></tr><tr><td>\n</td><td>匹配换行符</td><td>\w+\n</td><td><code>&quot;Yes\n&quot;</code>中的<code>&quot;Yes\n&quot;</code></td></tr><tr><td>\w</td><td>匹配字母、数字和下划线</td><td>\w+</td><td><code>&quot;So What&quot;</code>中的<code>&quot;So&quot;</code>和<code>&quot;What&quot;</code></td></tr><tr><td>\W</td><td>匹配非字母、数字和下划线</td><td>\W+</td><td><code>&quot;Room##1&quot;</code>中的<code>&quot;##&quot;</code></td></tr><tr><td>\s</td><td>匹配空白字符</td><td>\w+\s</td><td><code>&quot;I am light Jack!&quot;</code>中的<code>&quot;I &quot;</code>、<code>&quot;am &quot;</code>、<code>&quot;light &quot;</code></td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>\S+</td><td><code>&quot;I am light Jack!&quot;</code>中的<code>&quot;I&quot;</code>、<code>&quot;am&quot;</code>、<code>&quot;light&quot;</code>、<code>&quot;Jack!&quot;</code></td></tr><tr><td>\d</td><td>匹配十进制数字符</td><td>\d+</td><td><code>&quot;源自2019&quot;</code>中的<code>&quot;2019&quot;</code></td></tr><tr><td>\D</td><td>匹配非十进数制字符</td><td>\D+</td><td><code>&quot;源自2019&quot;</code>中的<code>&quot;源自&quot;</code></td></tr><tr><td>[char1-char2]</td><td>匹配对应范围字符</td><td>[0-9]+</td><td><code>&quot;祖国70周年生日快乐!&quot;</code>中的<code>&quot;70&quot;</code></td></tr></tbody></table></div><p>此外，可以通过在[char1-char2]内添加<code>^</code>来取反。如：<br><code>[^0-9]+</code>可匹配<code>&quot;祖国70周年生日快乐!&quot;</code>中的<code>&quot;祖国&quot;、&quot;周年生日快乐!&quot;</code>。</p><h3 id="定位点"><a href="#定位点" class="headerlink" title="定位点"></a>定位点</h3><p>利用定位点，正则表达式可以限定匹配位置。<br>常用定位点如下表所示：</p><div class="table-container"><table><thead><tr><th>定位点</th><th>描述</th><th>规则</th><th>匹配</th></tr></thead><tbody><tr><td>^</td><td>定位字符串开头</td><td>^\d+</td><td><code>&quot;0538-6388-5364&quot;</code>中的<code>&quot;0538&quot;</code></td></tr><tr><td>$</td><td>定位字符串结尾</td><td>\d+$</td><td><code>&quot;0538-6388-5364&quot;</code>中的<code>&quot;5364&quot;</code></td></tr><tr><td>\b</td><td>定位单词边界</td><td>\w+\b</td><td><code>&quot;have ate&quot;</code>中的<code>&quot;have&quot;</code>和<code>&quot;ate&quot;</code></td></tr></tbody></table></div><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>可以为正则表达式添加各种限定。<br>常用限定符如下表：</p><div class="table-container"><table><thead><tr><th>限定符</th><th>描述</th><th>规则</th><th>匹配</th></tr></thead><tbody><tr><td>*</td><td>匹配上一个元素零次或多次</td><td>\d*\.\d</td><td><code>&quot;w.385&quot;</code>中的<code>&quot;.3&quot;</code></td></tr><tr><td>+</td><td>匹配上一个元素一次或多次</td><td>\d+</td><td><code>&quot;0538-6388-5364&quot;</code>中的<code>&quot;0538&quot;</code>、<code>&quot;6388&quot;</code>和<code>&quot;5364&quot;</code></td></tr><tr><td>?</td><td>匹配上一个元素零次或一次</td><td>\w?\d+</td><td><code>&quot;Room123&quot;</code>中的<code>&quot;m123&quot;</code></td></tr><tr><td>{n}</td><td>匹配上一个元素n次</td><td>\w{2}</td><td><code>&quot;Air&quot;</code>中的<code>&quot;Ai&quot;</code></td></tr><tr><td>{n,}</td><td>匹配上一个元素至少n次</td><td>\w{2,}</td><td><code>&quot;Air&quot;</code>中的<code>&quot;Air&quot;</code></td></tr><tr><td>{n,m}</td><td>匹配上一个元素至少n次，至多m次</td><td>\w{1,3}</td><td><code>&quot;123ABC&quot;</code>中的<code>&quot;ABC&quot;</code></td></tr></tbody></table></div><h3 id="分组构造"><a href="#分组构造" class="headerlink" title="分组构造"></a>分组构造</h3><p>可以为匹配的对象分组，以便于区分不同的信息。<br>具体可以用<code>Match.Groups</code>获取组的集合。<br>分组的具体用法有：</p><div class="table-container"><table><thead><tr><th style="text-align:center">分组构造</th><th style="text-align:center">描述</th><th style="text-align:center">规则</th><th style="text-align:center">匹配</th></tr></thead><tbody><tr><td style="text-align:center">(regex)</td><td style="text-align:center">创建分组</td><td style="text-align:center">(\w+)\d+</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">(?=regex)</td><td style="text-align:center">判断是否满足条件</td><td style="text-align:center">\d+(?=[0-4])</td><td style="text-align:center"><code>&quot;0538-6388-5364&quot;</code>中的<code>&quot;0&quot;</code>、<code>3&quot;</code>、<code>&quot;3&quot;</code>、<code>&quot;3&quot;</code>和<code>&quot;4&quot;</code></td></tr><tr><td style="text-align:center">(?!regex)</td><td style="text-align:center">判断是否不满足条件</td><td style="text-align:center">\d+(?![0-4])</td><td style="text-align:center"><code>&quot;0538-6388-5364&quot;</code>中的<code>&quot;5&quot;</code>、<code>8&quot;</code>、<code>&quot;6&quot;</code>、<code>&quot;88&quot;</code>、<code>&quot;5&quot;</code>和<code>&quot;6&quot;</code></td></tr><tr><td style="text-align:center">(?:regex)</td><td style="text-align:center">定义非捕获组</td><td style="text-align:center">(?:\w+)\d+</td><td style="text-align:center">——</td></tr></tbody></table></div><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>下面提供两个正则表达式的应用实例。</p><h2 id="匹配邮箱"><a href="#匹配邮箱" class="headerlink" title="匹配邮箱"></a>匹配邮箱</h2><p>有时候需要从一段较为杂乱的字符串中获取有效的邮箱，用正则表达式可以很方便的完成。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> pattern = <span class="string">@"(\w+)@(\w+\.com)"</span>;</span><br></pre></td></tr></table></figure><p>上述匹配规则可以匹配以字母、数字和下划线为名的邮箱。</p><h2 id="匹配浮点数"><a href="#匹配浮点数" class="headerlink" title="匹配浮点数"></a>匹配浮点数</h2><p>有时会把数字储存在字符串内，为了提取方便，可以使用正则表达式来完成。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> pattern = <span class="string">@"([1-9]+|0(?=\.))\.\d+"</span>;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;编程中经常要处理字符串。其中，在提取子字符串方面，可以由正则表达式来完成。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://zhangbbsday.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="http://zhangbbsday.github.io/tags/C/"/>
    
      <category term="字符串" scheme="http://zhangbbsday.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="正则表达式" scheme="http://zhangbbsday.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C#元组</title>
    <link href="http://zhangbbsday.github.io/2019/10/24/cs-tuple/"/>
    <id>http://zhangbbsday.github.io/2019/10/24/cs-tuple/</id>
    <published>2019-10-24T03:36:37.000Z</published>
    <updated>2019-10-24T05:13:51.198Z</updated>
    
    <content type="html"><![CDATA[<hr><p>元组(Tuple)早就在C#中出现过，但直到7.0后，其才能真正发挥应有的作用。<br>这里的元组，便是指C#7.0以后的元组。</p><hr><a id="more"></a><h1 id="何谓元组"><a href="#何谓元组" class="headerlink" title="何谓元组"></a>何谓元组</h1><p>元组，从名字可以看出，是一堆数据的“组”。这些数据可能会有内在的联系，所以被分在一个组内，便于统一管理。<br>不妨考虑下面这个例子。<br>程序中，我们需要储存某些个人信息，那么可以用如下变量来表示：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> name;</span><br><span class="line"><span class="keyword">string</span> job;</span><br><span class="line"><span class="keyword">string</span> country;</span><br><span class="line">Sex sex;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这写起来很繁琐，而且这些数据无法直接体现其内在联系。不妨看看用元组会是什么样子：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">string</span> name, <span class="keyword">string</span> job, <span class="keyword">string</span> country, Sex sex, <span class="keyword">int</span> age) people;</span><br></pre></td></tr></table></figure><p>甚至可以再度简写为：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">string</span>, <span class="keyword">string</span>, <span class="keyword">string</span>, Sex, <span class="keyword">int</span>) people;</span><br></pre></td></tr></table></figure><p>这样，便可以通过一个变量<code>people</code>来获取相应数据。</p><h1 id="元组使用"><a href="#元组使用" class="headerlink" title="元组使用"></a>元组使用</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>元组的声明有多种方式，下面我只写出我常用的几种。</p><p><strong>用元组类型声明</strong>。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">string</span> name, <span class="keyword">string</span> job, <span class="keyword">string</span> country, Sex sex, <span class="keyword">int</span> age) people;</span><br><span class="line">(<span class="keyword">string</span>, <span class="keyword">string</span>, <span class="keyword">string</span>, Sex, <span class="keyword">int</span>) people;</span><br></pre></td></tr></table></figure><p><strong>用Var类型声明</strong>。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = (Name: <span class="string">"Jack"</span>, Job: <span class="string">"ASAF A level Number"</span>, Country: <span class="string">"USA"</span>, Gender: Sex.Male, Age: <span class="number">33</span>);</span><br><span class="line"><span class="keyword">var</span> people = (<span class="string">"Jack"</span>, <span class="string">"ASAF A level Number"</span>, <span class="string">"USA"</span>, Sex.Male, <span class="number">33</span>);</span><br></pre></td></tr></table></figure><p>其中上面两种中，第一个都是<strong>具名元组</strong>。</p><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>元组的调用和类很像，可以把其中的数据看作元组的成员。<br>无论是否为<strong>具名元组</strong>，都可以用如下方法调用：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> name = people.Item1;</span><br><span class="line"><span class="keyword">string</span> job = people.Item2;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>若是<strong>具名元组</strong>，还可以用对应的名字获取数据。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> name = people.Name;</span><br><span class="line"><span class="keyword">string</span> job = people.Job;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><blockquote><p>推荐用<strong>PascalCase</strong>命名法命名元组每一项的名字。</p></blockquote><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>元组其中一个重要应用便是作为返回值，可以一次返回多个不同的数据。<br>看如下的例子：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> (<span class="keyword">string</span>, <span class="keyword">string</span>, <span class="keyword">string</span>, Sex, <span class="keyword">int</span>) GetPeopleInformation()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> name;</span><br><span class="line">    <span class="keyword">string</span> job;</span><br><span class="line">    <span class="keyword">string</span> country;</span><br><span class="line">    Sex sex;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取输入</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (name, job, country, sex, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样便实现了多个值的返回。<br>相比于使用大量的<code>out</code>，元组显然更加优越。</p><h1 id="元组的其他应用"><a href="#元组的其他应用" class="headerlink" title="元组的其他应用"></a>元组的其他应用</h1><p>元组因为其特殊的构造，在C#中有很为广泛的应用。<br>比如我<a href="http://zhangbbsday.github.io/2019/10/20/vector2-struct/">上一篇</a> 中，便是用元组的<code>Equals</code>方法作为Vector2类<code>Equals</code>方法的判断。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;元组(Tuple)早就在C#中出现过，但直到7.0后，其才能真正发挥应有的作用。&lt;br&gt;这里的元组，便是指C#7.0以后的元组。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://zhangbbsday.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="http://zhangbbsday.github.io/tags/C/"/>
    
      <category term="元组" scheme="http://zhangbbsday.github.io/tags/%E5%85%83%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>构建Vector2类型</title>
    <link href="http://zhangbbsday.github.io/2019/10/20/vector2-struct/"/>
    <id>http://zhangbbsday.github.io/2019/10/20/vector2-struct/</id>
    <published>2019-10-20T13:43:19.000Z</published>
    <updated>2019-10-20T15:15:42.741Z</updated>
    
    <content type="html"><![CDATA[<hr><p>在大多数游戏引擎中，都会实现Vector类型，包括但不限于Vector2、Vector3等等。<br>出于好奇，加之想练习值类型的应用，我打算自己实现Vector2类型。</p><hr><a id="more"></a><h1 id="C-的值类型和引用类型"><a href="#C-的值类型和引用类型" class="headerlink" title="C#的值类型和引用类型"></a>C#的值类型和引用类型</h1><p>在C#里，数据类型有两种：值类型和引用类型。<br>具体来讲，值类型的数据是指储存在栈里的。每一个值类型直接包含值，修改一个已经有值的值类型，会创建一个新的值类型。<br>引用类型的数据是储存在堆里的。每一个已初始化的引用类型都包含一个指向数据的地址，相当于是C语言里的<strong>指针</strong>。若是有两个引用类型引用同一个对象，修改其中一个数据，都会使另一个数据发生变化。<br>常见的值类型有：</p><ul><li>整形类型；</li><li>浮点类型；</li><li>布尔类型</li></ul><p>常见的引用类型有：</p><ul><li>字符串类型;</li><li>class</li></ul><h1 id="Vector2类型的构建"><a href="#Vector2类型的构建" class="headerlink" title="Vector2类型的构建"></a>Vector2类型的构建</h1><p>可以把一个二维向量看作是一个值，那么我想要实现的Vector2类型，便是类似于整形类型的值类型。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>依据高中数学，我们可以很快写出如下代码：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Vector2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector2</span>(<span class="params"><span class="keyword">float</span> x, <span class="keyword">float</span> y</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> X &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> Y &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过一个构造函数来初始化坐标。</p><h2 id="重写ToString"><a href="#重写ToString" class="headerlink" title="重写ToString()"></a>重写ToString()</h2><p>现在的Vector2类型不过只是储存了数据，还无法输出到控制台，或者说无法变为一个有格式的字符串。<br>我们对一个二维向量，一般用$(x, y)$来表示坐标。<br>可以通过重写<code>ToString()</code>方法来实现其格式输出：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Vector2</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span> =&gt; <span class="string">$"(<span class="subst">&#123;X&#125;</span>,<span class="subst">&#123;Y&#125;</span>)"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，便可以调用<code>Console.WriteLine()</code>打印一个Vector2类型的变量。</p><h2 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h2><p>向量有几个基本属性：</p><ul><li>模；</li><li>单位向量</li></ul><p>为类型添加如下代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Vector2</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> Length &#123; <span class="keyword">get</span> =&gt; (<span class="keyword">float</span>)Math.Sqrt(X * X + Y * Y); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 Up &#123; <span class="keyword">get</span> =&gt; <span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">1f</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 Down &#123; <span class="keyword">get</span> =&gt; <span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">-1f</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 Left &#123; <span class="keyword">get</span> =&gt; <span class="keyword">new</span> Vector2(<span class="number">-1f</span>, <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 Right &#123; <span class="keyword">get</span> =&gt; <span class="keyword">new</span> Vector2(<span class="number">1f</span>, <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 Zero &#123; <span class="keyword">get</span> =&gt; <span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">0</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些属性在某些情况下很有用。</p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>对于向量，我们一般只去判断是否相等。这里相等的条件不是数学意义上的相等，而是指坐标的严格相等。<br>可以考虑重载<code>Equals()</code>方法，不过在重载之前，可以考虑用元组来自建一个比较方法。<br>添加如下代码:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Vector2</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params">Vector2 vector2</span>)</span> =&gt; (X, Y).Equals((vector2.X, vector2.Y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用元组的<code>Equals()</code>方法来比较，极大简化了代码量。<br>但在实际中，我们更常用<code>==</code>和<code>!=</code>来判断两者相等与否，这就需要重载运算符来实现。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Vector2</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="keyword">operator</span> ==(Vector2 a, Vector2 b) =&gt; a.Equals(b);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="keyword">operator</span> !=(Vector2 a, Vector2 b) =&gt; !(a == b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用我们刚刚写好的<code>Equals()</code>可以方便的写出重载运算符。<br>这时编译器可能会提示，要求重载<code>Equals()</code>方法，所以我们不妨将其加上。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Vector2</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span> =&gt; Equals((Vector2)obj);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="title">GetHashCode</span>(<span class="params"></span>)</span> =&gt; (X, Y).GetHashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要重载<code>Equals()</code>方法，必须同时重载<code>GetHashCode()</code>方法。用元组可以轻松地重载后者。</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>向量可以实现一些基本运算。可以通过重载<code>+``-``*``/</code>来实现。<br>添加如下代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Vector2</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> +(Vector2 a, Vector2 b) =&gt; <span class="keyword">new</span> Vector2(a.X + b.X, a.Y + b.Y);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> -(Vector2 a, Vector2 b) =&gt; <span class="keyword">new</span> Vector2(a.X - b.X, a.Y - b.Y);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> *(Vector2 a, Vector2 b) =&gt; <span class="keyword">new</span> Vector2(a.X * b.X, a.Y * b.Y);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> *(Vector2 a, <span class="keyword">float</span> b) =&gt; <span class="keyword">new</span> Vector2(a.X * b, a.Y * b);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> /(Vector2 a, Vector2 b) =&gt; <span class="keyword">new</span> Vector2(a.X / b.X, a.Y / b.Y);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> /(Vector2 a, <span class="keyword">float</span> b) =&gt; <span class="keyword">new</span> Vector2(a.X / b, a.Y / b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样便实现了向量的基本运算。</p><h2 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h2><p>获取向量所代表的方向，需要将其端点移至原点，并将其模变作$1$。<br>为了实现这个功能，先将两个坐标用坐标中较小的一个的绝对值做除法，然后除以其模。<br>代码如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Vector2</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="title">Normalize</span>(<span class="params">Vector2 vector</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Vector2 v = vector;</span><br><span class="line">        v /= Math.Max(Math.Abs(v.X), Math.Abs(v.Y));</span><br><span class="line">        v /= v.Length;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h1><p>全部代码如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Vector2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vector2</span>(<span class="params"><span class="keyword">float</span> x, <span class="keyword">float</span> y</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> X &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> Y &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> Length &#123; <span class="keyword">get</span> =&gt; (<span class="keyword">float</span>)Math.Sqrt(X * X + Y * Y); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 Up &#123; <span class="keyword">get</span> =&gt; <span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">1f</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 Down &#123; <span class="keyword">get</span> =&gt; <span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">-1f</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 Left &#123; <span class="keyword">get</span> =&gt; <span class="keyword">new</span> Vector2(<span class="number">-1f</span>, <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 Right &#123; <span class="keyword">get</span> =&gt; <span class="keyword">new</span> Vector2(<span class="number">1f</span>, <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 Zero &#123; <span class="keyword">get</span> =&gt; <span class="keyword">new</span> Vector2(<span class="number">0</span>, <span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span> =&gt; Equals((Vector2)obj);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params">Vector2 vector2</span>)</span> =&gt; (X, Y).Equals((vector2.X, vector2.Y));</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params">Vector2 a, Vector2 b</span>)</span> =&gt; a.Equals(b);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span> =&gt; <span class="string">$"(<span class="subst">&#123;X&#125;</span>,<span class="subst">&#123;Y&#125;</span>)"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">int</span> <span class="title">GetHashCode</span>(<span class="params"></span>)</span> =&gt; (X, Y).GetHashCode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="keyword">operator</span> ==(Vector2 a, Vector2 b) =&gt; a.Equals(b);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="keyword">operator</span> !=(Vector2 a, Vector2 b) =&gt; !(a == b);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> +(Vector2 a, Vector2 b) =&gt; <span class="keyword">new</span> Vector2(a.X + b.X, a.Y + b.Y);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> -(Vector2 a, Vector2 b) =&gt; <span class="keyword">new</span> Vector2(a.X - b.X, a.Y - b.Y);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> *(Vector2 a, Vector2 b) =&gt; <span class="keyword">new</span> Vector2(a.X * b.X, a.Y * b.Y);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> *(Vector2 a, <span class="keyword">float</span> b) =&gt; <span class="keyword">new</span> Vector2(a.X * b, a.Y * b);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> /(Vector2 a, Vector2 b) =&gt; <span class="keyword">new</span> Vector2(a.X / b.X, a.Y / b.Y);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="keyword">operator</span> /(Vector2 a, <span class="keyword">float</span> b) =&gt; <span class="keyword">new</span> Vector2(a.X / b, a.Y / b);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="title">Normalize</span>(<span class="params">Vector2 vector</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Vector2 v = vector;</span><br><span class="line">        v /= Math.Max(Math.Abs(v.X), Math.Abs(v.Y));</span><br><span class="line">        v /= v.Length;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过加入更多有用的方法和属性，来使这个类型更加完善。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;在大多数游戏引擎中，都会实现Vector类型，包括但不限于Vector2、Vector3等等。&lt;br&gt;出于好奇，加之想练习值类型的应用，我打算自己实现Vector2类型。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://zhangbbsday.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="C#" scheme="http://zhangbbsday.github.io/tags/C/"/>
    
      <category term="值类型" scheme="http://zhangbbsday.github.io/tags/%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="向量" scheme="http://zhangbbsday.github.io/tags/%E5%90%91%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>埃氏筛法</title>
    <link href="http://zhangbbsday.github.io/2019/10/18/prime-sieve/"/>
    <id>http://zhangbbsday.github.io/2019/10/18/prime-sieve/</id>
    <published>2019-10-18T14:00:53.000Z</published>
    <updated>2019-10-20T15:06:39.439Z</updated>
    
    <content type="html"><![CDATA[<hr><p>最近C程刚好讲到素数的求法，在实现了基础的方法后，我也学习了埃氏筛法，打算记录下来，以备不时之需。</p><hr><a id="more"></a><h1 id="埃氏筛法-sieve-of-Eratosthenes"><a href="#埃氏筛法-sieve-of-Eratosthenes" class="headerlink" title="埃氏筛法(sieve of Eratosthenes)"></a>埃氏筛法(sieve of Eratosthenes)</h1><p>埃氏筛法又称为素数筛，是一种求解小范围素数的有效方法。<br>具体步骤如下：</p><ol><li>输入一个$[2, n]$区间，保存在列表中。</li><li>把列表中可以被$2$整除的数筛除。</li><li>把列表中可以被${3 + 2m(m = 0, 1, 2…[\frac{n-3}{2}])}$整除的数筛除。</li><li>获取$[2, n]$区间内的所有素数。</li></ol><p>总体来说，埃氏筛法是用空间换取了时间，时间复杂度为<script type="math/tex">{O(Nlog(logN))}</script>。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>C#实现代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> List&lt;<span class="keyword">int</span>&gt; <span class="title">Sieve</span>(<span class="params"><span class="keyword">int</span> n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">2</span>)</span><br><span class="line">        list.Add(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">            list.Add(i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            list.Add(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i * i &lt;= n; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; list.Count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (list[j] != i &amp;&amp; list[j] % i == <span class="number">0</span>)</span><br><span class="line">                list[j] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述代码用$-1$标记删去的项，在调用该方法时，通过判断该值即可获取相应素数。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;最近C程刚好讲到素数的求法，在实现了基础的方法后，我也学习了埃氏筛法，打算记录下来，以备不时之需。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://zhangbbsday.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C#" scheme="http://zhangbbsday.github.io/tags/C/"/>
    
      <category term="算法" scheme="http://zhangbbsday.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="素数" scheme="http://zhangbbsday.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#中的ref和out</title>
    <link href="http://zhangbbsday.github.io/2019/10/17/cs-ref-out/"/>
    <id>http://zhangbbsday.github.io/2019/10/17/cs-ref-out/</id>
    <published>2019-10-17T14:19:51.000Z</published>
    <updated>2019-10-18T14:42:07.103Z</updated>
    
    <content type="html"><![CDATA[<hr><p>终于可以开始写有关C#的内容了，这次先记录下C#中的两个关键字<code>ref</code> <code>out</code>的使用。<br>在C#7.0以后，可以用更加方便的元组代替二者。</p><hr><a id="more"></a><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p>我们可以考虑这样一种情况。<br>在某次项目中，我们需要实现一个<code>Swap(int a, int b)</code>方法，用来交换两个整形变量的值。很显然，该方法必须有如下一种实现：</p><ol><li>一次返回两个值。</li><li>直接修改两个变量。</li></ol><p>而我们知道，一般情况下，一个方法只能返回一个值。这种情况下，就需要用到<code>ref</code>了。<br>使用<code>ref</code>可以实现第二种方法，它会传递变量的引用给方法。<br>可以写出如下代码：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="keyword">ref</span> <span class="keyword">int</span> a, <span class="keyword">ref</span> <span class="keyword">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Main</code>函数中调用：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$"a = <span class="subst">&#123;a&#125;</span>, b = <span class="subst">&#123;b&#125;</span>"</span>);</span><br><span class="line">    Swap(<span class="keyword">ref</span> a, <span class="keyword">ref</span> b);</span><br><span class="line">    Console.WriteLine(<span class="string">$"a = <span class="subst">&#123;a&#125;</span>, b = <span class="subst">&#123;b&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = 4, b = 3</span><br><span class="line">a = 3, b = 4</span><br></pre></td></tr></table></figure><p>在调用方法时，实参也要带<code>ref</code>关键字，且所传递的变量必须初始化。</p><h1 id="out"><a href="#out" class="headerlink" title="out"></a>out</h1><p>在上文中，我们提及了两种实现交换的方法，而<code>out</code>可以实现第一种方法。<br>可以改写<code>Swap</code>函数为：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Swap</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">out</span> <span class="keyword">int</span> c</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    c = a;</span><br><span class="line">    a = b;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写<code>Main</code>函数为：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$"a = <span class="subst">&#123;a&#125;</span>, b = <span class="subst">&#123;b&#125;</span>"</span>);</span><br><span class="line">    a = Swap(a, b, <span class="keyword">out</span> <span class="keyword">int</span> c);</span><br><span class="line">    b = c;</span><br><span class="line">    Console.WriteLine(<span class="string">$"a = <span class="subst">&#123;a&#125;</span>, b = <span class="subst">&#123;b&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其输出结果和使用<code>ref</code>输出相同。<br>在调用方法时，实参也要带<code>out</code>关键字，且所传递的变量必须在方法内初始化。</p><blockquote><p>在C#7.0以后可以在参数列表中声明<code>out</code>变量。7.0前必须在调用方法前先声明所需变量。</p></blockquote><h1 id="代替"><a href="#代替" class="headerlink" title="代替"></a>代替</h1><p>在C#7.0以后，可以用元组代替上述两个关键字。元组不仅更加便于理解，而且可读性比之后两者有了显著性的提高。<br>在需要返回多个值时，推荐优先考虑元组的实现。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;终于可以开始写有关C#的内容了，这次先记录下C#中的两个关键字&lt;code&gt;ref&lt;/code&gt; &lt;code&gt;out&lt;/code&gt;的使用。&lt;br&gt;在C#7.0以后，可以用更加方便的元组代替二者。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="C#" scheme="http://zhangbbsday.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="http://zhangbbsday.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://zhangbbsday.github.io/2019/10/16/git-command/"/>
    <id>http://zhangbbsday.github.io/2019/10/16/git-command/</id>
    <published>2019-10-16T08:43:58.000Z</published>
    <updated>2019-10-18T15:22:28.652Z</updated>
    
    <content type="html"><![CDATA[<hr><p>git是一种常用的版本控制软件，在团队协作中发挥着重要作用。不仅可以在本地建立仓库，也可以在诸如GitHub等网站建立远程仓库。<br>下面会写写一些常用的git命令，能够满足<strong>普通程度</strong>的需要。</p><hr><a id="more"></a><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p>通过克隆GitHub远程仓库，可以方便的在本地进行编辑修改，并随时上传。<br><strong>命令</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;repositories&gt;</span><br></pre></td></tr></table></figure><blockquote><p>我一般是用网站创建新仓库，再把其克隆到本地进行修改，最后上传。</p></blockquote><h2 id="添加-更新"><a href="#添加-更新" class="headerlink" title="添加/更新"></a>添加/更新</h2><p>添加/更新修改过的文件到仓库中。<br><strong>命令一</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;file name&gt;</span><br></pre></td></tr></table></figure><p>也可以一次操作多个文件。<br><strong>命令二</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交修改到仓库，同时标注提交信息。<br><strong>命令</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &apos;message&apos;</span><br></pre></td></tr></table></figure><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>查看仓库状态，可以用来确认操作是否正确。<br><strong>命令</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><p>如果在<code>$ git add</code>后, 会有如下类似显示:</p><p><img src="https://i.loli.net/2019/10/16/JSOhzW1XbFVarlD.png" alt="image.png"></p><p>如果在<code>$ git commit -m &#39;message&#39;</code>后, 会有如下类似显示:<br><img src="https://i.loli.net/2019/10/16/G1IudRgMmitAJEH.png" alt="image.png"></p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>上传本地仓库到远程仓库中，如GitHub等。<br><strong>命令</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure><blockquote><p>如果用克隆，就用上述命令即可。若是在用新建分支上传，需要用<code>$ git push --set-upstream origin other</code>确定分支，再进行上传。</p></blockquote><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支据说是git有别于其他版本管理软件的关键因素，目前我还没怎么用过，相信以后会有所体会。</p><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><p>可以查看各个分支，同时显示目前所在分支。<br><strong>命令</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git brance</span><br></pre></td></tr></table></figure><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>可以新建一个分支。<br><strong>命令</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git brance &lt;new brance name&gt;</span><br></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>可以删除一个分支。<br><strong>命令</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git brance -d &lt;brance name&gt;</span><br></pre></td></tr></table></figure><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p>可以切换目前所在分支。<br><strong>命令</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout &lt;brance name&gt;</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>可以合并分支到主分支中，是多人协作的关键。<br><strong>命令</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;other brance&gt;</span><br></pre></td></tr></table></figure><blockquote><p>需要在主分支中使用此命令。</p></blockquote><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>根据我个人理解，是将本地仓库和远程仓库同步。<br><strong>命令</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure><h1 id="常用流程"><a href="#常用流程" class="headerlink" title="常用流程"></a>常用流程</h1><p>下面是我使用git的常用流程。</p><ol><li>克隆远程仓库(<code>$ git clone</code>)。</li><li>文件操作。</li><li>添加/更新修改过的文件到仓库中(<code>$ git add</code>)。</li><li>提交修改(<code>$ git commit -m</code>)。</li><li>上传(<code>$ git push</code>)。</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>git的命令远远不止这些，有些更加高级的用法会在今后学习。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;git是一种常用的版本控制软件，在团队协作中发挥着重要作用。不仅可以在本地建立仓库，也可以在诸如GitHub等网站建立远程仓库。&lt;br&gt;下面会写写一些常用的git命令，能够满足&lt;strong&gt;普通程度&lt;/strong&gt;的需要。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="命令行" scheme="http://zhangbbsday.github.io/categories/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    
      <category term="git" scheme="http://zhangbbsday.github.io/tags/git/"/>
    
      <category term="命令行" scheme="http://zhangbbsday.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>杀手</title>
    <link href="http://zhangbbsday.github.io/2019/10/16/killer/"/>
    <id>http://zhangbbsday.github.io/2019/10/16/killer/</id>
    <published>2019-10-16T04:35:47.000Z</published>
    <updated>2019-10-18T14:41:55.748Z</updated>
    
    <content type="html"><![CDATA[<hr><p>所谓的杀手，真的不需要感情吗……</p><hr><a id="more"></a><blockquote><p>声明：</p><blockquote><ul><li>游戏之作，自娱自乐。</li><li>如有雷同，纯属巧合。</li><li>如果侵权，及时联系，马上删除。</li></ul></blockquote></blockquote><p>“砰！”</p><p>伴随着一声枪响，一个男子倒在血泊中。</p><p>在这人身旁，少年默默收回了手枪。他面容清秀，能在脸上看到些许的稚嫩。</p><p>他蹲下身，紧了紧右手手套，向那男子衣服中伸去。摸索片刻后，他的脸上露出了迷惑的表情。</p><p>“……没有，为什么？”少年的声音很轻，没有变声期那种沙哑，反而有着鸟鸣般的清脆。</p><p>他抽出手，缓缓起身。就在此刻，他的双耳突然抖动了两下。</p><p>一阵细微的声响被他捕获，那是鞋子摩擦水泥地面的声音。</p><p>他转过身，面向房门外。在昏暗的远方，一个人影浮现在他眼中。</p><p>那是一个高大的男子，从头到脚，他的全身都被黑色覆盖。甚至连脸上，都蒙上了一层黑色的面罩。</p><p>少年没有动，就只是看着他不断的逼近。</p><p>鞋子摩擦地面的声音停止了。高大男子站在少年前方二三十米处，左手中不知何时已经握上了一把枪。</p><p>“我……是被抛弃了吗？”少年开口了，那只能给无数人带来恐惧的手枪竟是丝毫没有影响到他。</p><p>高大男子没有说话。他转了一圈左手中的手枪，他猛然抬起手，瞄准少年扣下了扳机。</p><p>“砰”的一声，一颗子弹呼啸而过，直接贯穿了少年的肩膀。</p><p>少年吃痛的叫了一声，脸上变得有些苍白。一把手枪从他右手处滑落，在地面上发出一声哀嚎。</p><p>高大男子摇了摇头，终于开口道：“为什么不还击？”他的声音无比嘶哑，堪比金属摩擦之声。</p><p>“我做不到。”少年左手摁着伤口，但血流还是如同小溪般沿着衣服流下。</p><p>“愚蠢。”男子嗤笑一声，给手枪再次上膛，“得亏老子调教你五年，还是有这般幼稚的想法。”</p><p>他再度瞄准，枪口遥指少年头颅，“记住，我们杀手，是不需要感情的。”话音刚落，他便扣动了扳机。</p><p>少年瞳孔一缩，看着那不断逼近的子弹，身体竟是不自主的向一旁偏去。</p><p>子弹擦着他的太阳穴而过，他顺势倒在地上，没了声响。</p><p>高大男子静立了片刻，微不可查的点了下头。他收回那把冒着青烟的手枪，嘶哑的声音响起：“他已经死了。”</p><p>拍手声响起。在他身后，一位身着白衣，留着白色长发的男子一边鼓掌，一边微笑道：“不愧是老板的得力干将‘孤狼’，就算是跟了自己五年之久的弟子，动起手来也是没有丝毫犹豫。”</p><p>见孤狼没有回应的打算，这白发男子依旧微笑道：“不过孤狼啊，老板可是要让我亲眼见证‘白鹿’的死亡，所以他的身体，我也不得不仔细地瞧瞧了。”</p><p>“你怀疑我没有杀了他？”孤狼嘶哑的声音响起。尽管有着面罩的遮挡，但白发男子还是感受到了一双透着凶光的眼睛。</p><p>“哎呀呀，被‘狼’盯着，我可是浑身都不自在啊。”他口称不自在，但脸上的笑容依旧，“我可不会质疑你的实力，但……说不定呢？”</p><p>他拨开刘海，大步向前走去，“这世间有太多不可能，我可不敢将老板的命令放在虚无缥缈的运气上。”</p><p>盯着他的后背，孤狼左手按在了枪柄上。</p><p>二三十米的距离，白发男子不过走了十秒左右。他俯视着倒在地上的白鹿，笑着对身后的人道：“孤狼，可不要让我们失望啊。”</p><p>就在此时，躺在地上的白鹿突然睁开双眼，猛地伸手拉住白发男子的腿。与其身材不符的力量，直接让后者一个踉跄，跪倒在地上，白色的长发瞬间变得凌乱。</p><p>紧接着便是一声枪响，黄色子弹从白发男子右手臂穿过，竟是刚好没有碰到白鹿的衣服。</p><p>白发男子叹息一声，刚想有动作，便感觉太阳穴处传来的丝丝寒意。白鹿的手枪，此时正抵在他的命门上。</p><p>“不要动。”白鹿的声音有点喘，负伤作战还是给他带来了不少影响。</p><p>“哎……”身上仿佛流的不是自己的血，那白发男子竟是依旧挂着微笑，“你们啊，一个个的，为什么都走上这个道路了呢……”</p><p>孤狼靠了过来，他瞥了眼白鹿，从兜里扔出一个药瓶，“吃了吧。”</p><p>“哦。”白鹿应了一声，熟练地服下了两颗药片。</p><p>“你们应该明白的，离开了我们就是死路一条。”白发男子看见这一幕，笑着说道，“这一次挺过去了，那么下一次呢，下下一次呢？”</p><p>“你们会生不如死的。”他的声音依旧平稳，丝毫没有负伤者应有的状态。</p><p>“总比你这种状态好吧。”白鹿的脸色由苍白转向红润，他的双眼变得更加的明亮，“至少，我有痛觉。”</p><p>“痛觉？无用的东西。”白发男子笑了笑，“你这种异端就是我们的污点。”</p><p>白鹿撇了撇嘴，看向沉默的孤狼道：“师傅，这家伙该怎么办，杀掉吗？”</p><p>没等孤狼回答，白发男子又笑道：“孤狼啊孤狼，现在你还有机会，杀了白鹿，你依旧是我们的朋友。”</p><p>“朋友？奴隶还差不多。”孤狼哼了一声，“杀了吧。”</p><p>“嗯。”白鹿扣动扳机，直接将白发男子的头打爆。</p><p>拍了拍身子，白鹿站起来，仰着头看着孤狼问道：“师傅，异端是什么意思？”</p><p>“凡是不符合那人心意的，就是异端。”孤狼嘿了一声。他踏过无头尸体，走向房间内那倒在血泊里的男子。</p><p>“是他吗……”孤狼面罩下的双眼微微眯起，“竟然舍得用这家伙做诱饵，看来那人对‘零’很是重视啊……”</p><p>他转过身，看着那包扎伤口的白鹿，自言自语道：“你可是托付给我了一个大麻烦啊，前辈。”</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;所谓的杀手，真的不需要感情吗……&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="随便写写" scheme="http://zhangbbsday.github.io/categories/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
    
      <category term="小说" scheme="http://zhangbbsday.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown常用内容</title>
    <link href="http://zhangbbsday.github.io/2019/10/15/markdown/"/>
    <id>http://zhangbbsday.github.io/2019/10/15/markdown/</id>
    <published>2019-10-15T06:27:37.000Z</published>
    <updated>2019-10-27T14:56:58.597Z</updated>
    
    <content type="html"><![CDATA[<hr><p>写完了hexo，就在写写MarkDown的使用吧。</p><hr><a id="more"></a><h1 id="所谓MarkDown"><a href="#所谓MarkDown" class="headerlink" title="所谓MarkDown"></a>所谓MarkDown</h1><p>所谓MarkDown，在我看来就是一个有了各种变化的文本。这里的各种变化，包括但不限于字体的粗细斜正、多级标题、代码块、超链接等等。<br>而上述的这些变化，都可以通过一系列特定的字符和格式来实现。这可以说是极大的提高了编写的效率。</p><h1 id="我常用的几种"><a href="#我常用的几种" class="headerlink" title="我常用的几种"></a>我常用的几种</h1><p>MarkDown有很多内容，我不过是粗略的掌握了其中一点，但已经足够编写一般性的文章。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>正文部分不用任何格式，只要和打txt文本一样打字就可以了。<br><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一段文字。</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><p>这是一段文字。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题用MarkDown写十分便捷。<br>标题有多级，可以通过以下两种方法写：<br><strong>示例一</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这是一级标题</span><br><span class="line">============</span><br><span class="line">这是二级标题</span><br><span class="line">------------</span><br></pre></td></tr></table></figure><p><strong>输出一</strong>：</p><p><img src="https://i.loli.net/2019/10/14/Ro2rmFyNVLnYajP.png" alt="page02_1.png"></p><p>这种写法只能写出两级标题。</p><p><strong>示例二</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p><strong>输出二</strong>：</p><p><img src="https://i.loli.net/2019/10/14/lpxGDZv1XdrNOES.png" alt="page02_2.png"></p><p>这种写法可以写出六级标题。注意<code># 标题</code>中是有空格的。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>MarkDown可以对字体进行基本的操作。<br><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**粗体**</span><br><span class="line">***粗斜体***</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><p><em>斜体</em><br><strong>粗体</strong><br><strong><em>粗斜体</em></strong><br><del>删除线</del></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>作为一个技术博客，写代码是必不可少的。MarkDown用专门的代码块来显示代码。<br>代码块分单行代码块和多行代码块。</p><h3 id="单行代码块"><a href="#单行代码块" class="headerlink" title="单行代码块"></a>单行代码块</h3><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`$ cd`</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><p><code>$ cd</code></p><h3 id="多行代码块"><a href="#多行代码块" class="headerlink" title="多行代码块"></a>多行代码块</h3><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(```cs)</span><br><span class="line">class Man</span><br><span class="line">&#123;</span><br><span class="line">    public Name &#123; get; set; &#125;</span><br><span class="line">    public void Do()</span><br><span class="line">    &#123;</span><br><span class="line">        //DoSomething……</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure><blockquote><p>上文用的(` ` `) 是为了防止其编译，正常使用时不带括号。</p></blockquote><p><strong>输出</strong>：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Man</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Do</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//DoSomething……</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐注明所用代码语言，便于语法高亮检查。</p><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>引用块是多用来引用别人的话、前情提要等等。<br><strong>示例一</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 活着就是为了死 ——张教主</span><br><span class="line">这句话，直接点明了人生的意义。</span><br></pre></td></tr></table></figure><p><strong>输出一</strong>：</p><blockquote><p>活着就是为了死 ——张教主<br>这句话，直接点明了人生的意义。</p></blockquote><p><code>&gt;</code>会将其后的所有内容包括其中，直到换行为止。</p><p>引用还可以分级。<br><strong>示例二</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 活着就是为了死 ——张教主</span><br><span class="line">&gt;&gt;这句话，直接点明了人生的意义。</span><br></pre></td></tr></table></figure><p><strong>输出二</strong>：</p><blockquote><p>活着就是为了死 ——张教主</p><blockquote><p>这句话，直接点明了人生的意义。</p></blockquote></blockquote><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>MarkDown提供了插入图片的功能。</p><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![黑族AB.png](https://i.loli.net/2019/10/15/WIFel1zcdvoZLOP.png)</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><p><img src="https://i.loli.net/2019/10/15/WIFel1zcdvoZLOP.png" alt="黑族AB.png"></p><blockquote><p>这里的图片来自<a href="http://www.u17.com/comic/185884.html" target="_blank" rel="noopener">《子文明》</a> ，有兴趣的可以去看看。</p></blockquote><p>在用MarkDown写hexo文章时，插入图片有两种方式：</p><ul><li>网络引用(CDN)；</li><li>本地引用；</li></ul><p>因为本地引用会出现图片无法正常显示的错误，我采用网络引用的方法。</p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>MarkDown写超链接的方式和图片类似。<br><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[子文明 百度百科](https://baike.baidu.com/item/%E5%AD%90%E6%96%87%E6%98%8E/23781519?fr=aladdin)</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br><a href="https://baike.baidu.com/item/%E5%AD%90%E6%96%87%E6%98%8E/23781519?fr=aladdin" target="_blank" rel="noopener">子文明 百度百科</a></p><blockquote><p>这里的<code>子文明 百度百科</code>是我为《子文明》漫画创建的词条，以后会持续保持更新，有兴趣的也可以参与进来。</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>分割线是文章条理清晰的好帮手。用MarkDown可以很方便的写出分割线。<br><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">----</span><br><span class="line">* * *</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><hr><hr><p>也可以用三个及以上的符号表示。不同的主题可能分割线视觉效果不同。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表是使文章内容更加条理的工具，有有序列表和无序列表之分。</p><p><strong>示例一</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">XX游戏更新内容如下：</span><br><span class="line">+ 增加了新的角色；</span><br><span class="line">- 修改了部分数值；</span><br><span class="line">* 修复了些许的BUG；</span><br></pre></td></tr></table></figure><p><strong>输出一</strong>：</p><p>XX游戏更新内容如下：</p><ul><li>增加了新的角色；</li></ul><ul><li>修改了部分数值；</li></ul><ul><li>修复了些许的BUG；</li></ul><blockquote><p>其中<code>+</code>可与<code>*</code> <code>-</code>互换。</p></blockquote><p><strong>示例二</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">XX游戏更新内容如下：</span><br><span class="line">1. 增加了新的角色；</span><br><span class="line">2. 修改了部分数值；</span><br><span class="line">3. 修复了些许的BUG；</span><br></pre></td></tr></table></figure><p><strong>输出二</strong>:</p><p>XX游戏更新内容如下：</p><ol><li>增加了新的角色；</li><li>修改了部分数值；</li><li>修复了些许的BUG；</li></ol><blockquote><p>注意序号和内容之间的空格。</p></blockquote><p>列表还可以嵌套。<br><strong>示例三</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">XX游戏更新内容如下：</span><br><span class="line">+ 2019.8</span><br><span class="line">    1. 增加了新的角色；</span><br><span class="line">    2. 修改了部分数值；</span><br><span class="line">    3. 修复了些许的BUG；</span><br><span class="line">+ 2019.9</span><br><span class="line">    1. 加入新的敌人。</span><br><span class="line">    2. 优化游戏运行速度。</span><br></pre></td></tr></table></figure><p><strong>输出三</strong>：</p><p>XX游戏更新内容如下：</p><ul><li>2019.8<ol><li>增加了新的角色；</li><li>修改了部分数值；</li><li>修复了些许的BUG；</li></ol></li><li>2019.9<ol><li>加入新的敌人。</li><li>优化游戏运行速度。</li></ol></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>MarkDown可以比较方便的编写简单表格。<del>其实我没怎么用过。</del><br><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">姓名|修为|国籍</span><br><span class="line">----|:----:|----:</span><br><span class="line">Jack|A|美国</span><br><span class="line">王一凡|国级|中国</span><br></pre></td></tr></table></figure><p><strong>输出</strong>:</p><div class="table-container"><table><thead><tr><th>姓名</th><th style="text-align:center">修为</th><th style="text-align:right">国籍</th></tr></thead><tbody><tr><td>Jack</td><td style="text-align:center">A</td><td style="text-align:right">美国</td></tr><tr><td>王一凡</td><td style="text-align:center">国级</td><td style="text-align:right">中国</td></tr></tbody></table></div><p><del>目前发现无法更改文字位置，只能默认居左排布。</del><br>现在表格文字位置可以更改了。(2019.10.27)</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>MarkDown还可以画流程图，这个等我用到时候再试试吧。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;写完了hexo，就在写写MarkDown的使用吧。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="MarkDown" scheme="http://zhangbbsday.github.io/categories/MarkDown/"/>
    
    
      <category term="MarkDown" scheme="http://zhangbbsday.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令</title>
    <link href="http://zhangbbsday.github.io/2019/10/14/hexo-command/"/>
    <id>http://zhangbbsday.github.io/2019/10/14/hexo-command/</id>
    <published>2019-10-14T10:09:41.000Z</published>
    <updated>2019-10-18T14:41:55.756Z</updated>
    
    <content type="html"><![CDATA[<hr><p>第一次用hexo搭建的博客，把一些基础的指令记录一下，以便以后查看。<br>一开始我以为只能用<code>npm</code>, 但后来发现用<code>git</code>更加方便。<del>~果然天下命令行皆一家吗……</del>~</p><hr><a id="more"></a><p><strong>跳转目录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd &lt;directory&gt;</span><br></pre></td></tr></table></figure></p><p>可以跳转到相应目录下。</p><p><strong>清理缓存</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure></p><p>这个名字是我按自己理解来的，在上传文章、更改某些内容和设定时需要先使用此命令。</p><p><strong>调试</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p>其实调试是另一个命令，但用这个更加方便快捷。可以在发布前查看更改内容。<br>启动调试后，登录<a href="http://localhost:4000" target="_blank" rel="noopener">调试链接</a> 即可查看内容。</p><p><strong>上传</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>通过这两个命令，可以实现网站的更新。</p><hr><p>具体更新的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;第一次用hexo搭建的博客，把一些基础的指令记录一下，以便以后查看。&lt;br&gt;一开始我以为只能用&lt;code&gt;npm&lt;/code&gt;, 但后来发现用&lt;code&gt;git&lt;/code&gt;更加方便。&lt;del&gt;~果然天下命令行皆一家吗……&lt;/del&gt;~&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="命令行" scheme="http://zhangbbsday.github.io/categories/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    
      <category term="命令行" scheme="http://zhangbbsday.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="hexo" scheme="http://zhangbbsday.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
